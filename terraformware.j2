# Terraform Template (generated through Jinja template)
#

# set consul backend
data "terraform_remote_state" "{{ custom_locals('module_dir') }}" {
  backend = "consul"
  config {
    address      = "{{ custom_variable('consul_server') }}"
    access_token = "{{ custom_variable('consul_token') }}"
    datacenter   = "GEANT"
    scheme       = "http"
    path         = "{{ custom_locals('module_dir') }}"
    lock         = "true"
  }
}

/*
# Configure Infoblox Provider
provider "infoblox" {
    host      = "{{ custom_variable('iblox_server') }}"
    username  = "{{ custom_variable('iblox_username') }}"
    password  = "{{ custom_variable('iblox_password') }}"
    sslverify = "false"
}
*/

# Configure VMware vSphere Provider
provider "vsphere" {
    vsphere_server       = "{{ custom_variable('vsphere_server') }}"
    user                 = "{{ custom_variable('vsphere_username') }}"
    password             = "{{ custom_variable('vsphere_password') }}"
    allow_unverified_ssl = "true"
}

# Create folder "{{ custom_locals('module_dir') }}"
resource "vsphere_folder" "{{ custom_locals('module_dir') }}" {
    datacenter = "${var.common["datacenter"]}"
    path       = "{{ custom_locals('module_dir') }}"
}

{% for count in range(instances|int) -%}
{% set instance = "_" ~ (count + 1)|string -%}
/*
# Create Infoblox A record for {{ custom_dictionary(instance, 'hostname') }}
resource "infoblox_record" "{{ custom_dictionary(instance, 'hostname') }}_A" {
    value = "${var.{{ instance }}["ipv4_address"]}"
    name = "${element(split(".", var.{{ instance }}["hostname"]), 0)}"
    domain = "${var.{{ instance }}["domain"]}"
    type = "A"
    ttl = 3600
}

# Create Infoblox AAAA record for {{ custom_dictionary(instance, 'hostname') }}
resource "infoblox_record" "{{ custom_dictionary(instance, 'hostname') }}_AAAA" {
    value = "${var.{{ instance }}["ipv6_address"]}"
    name = "${element(split(".", var.{{ instance }}["hostname"]), 0)}"
    domain = "${var.{{ instance }}["domain"]}"
    type = "AAAA"
    ttl = 3600
}
*/

# Create virtual machine {{ custom_dictionary(instance, 'hostname') }} within the folder {{ custom_locals('module_dir') }}
resource "vsphere_virtual_machine" "{{ custom_dictionary(instance, 'hostname') }}" {
    name        = "${var.{{ instance }}["hostname"]}"
    datacenter  = "${var.common["datacenter"]}"
    folder      = "{{ custom_locals('module_dir') }}"
    vcpu        = "${var.{{ instance }}["vcpu"]}"
    memory      = "${var.{{ instance }}["memory"]}"
    dns_servers = "${var.dns_servers}"
    domain      = "${var.{{ instance }}["domain"]}"

    network_interface {
        label              = "${var.{{ instance }}["net_label"]}"
        ipv4_address       = "${var.{{ instance }}["ipv4_address"]}"
        ipv4_gateway       = "${var.{{ instance }}["ipv4_gateway"]}"
        ipv4_prefix_length = "${var.{{ instance }}["ipv4_prefix_length"]}"
        ipv6_address       = "${var.{{ instance }}["ipv6_address"]}"
        ipv6_gateway       = "${var.{{ instance }}["ipv6_gateway"]}"
        ipv6_prefix_length = "${var.{{ instance }}["ipv6_prefix_length"]}"
    }

    /*
    network_interface {
        label   .... (2nd network interface)
    }
    */

    disk {
        datastore = "${var.common["datastore"]}"
        template  = "${var.common["template"]}"
    }

    /*
    provisioner "remote-exec" {
        inline = [
          "/bin/sed -i s,PUPPETSERVER,${var.common["puppet_server"]}, ${var.common["puppet_conf"]}",
          "/bin/sed -i s,PUPPETCA,${var.puppet_ca}, ${var.common["puppet_conf"]}",
          "/bin/sed -i s,PUPPETENVIRONMENT,${var.puppet_environment}, ${var.common["puppet_conf"]}",
        ]
    }
    */

}

{% endfor %}
