#!/usr/bin/python
#
"""
  requirements through pip:
    - pyhcl
    - infoblox-client
    - python-terraform
    - ast, requests, configparser, jinja2, argparse, json
  TODO:
    - add External/Internal view for Infoblox (now we've hardcoded External)
    - add progress and output to terraform execution
"""
import os
import ast
import json
import argparse
import ConfigParser
from datetime import datetime
import git
import hcl
from jinja2 import Template
from python_terraform import Terraform
from infoblox_client import connector
from infoblox_client import objects
from iblox_kit import record
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

MODULE_DIR = os.path.basename(os.getcwd())
CRED_CONF = os.path.join(os.environ['HOME'], '.terraformware.conf')
CRED_FILE_CONTENT = """[terraformware]\n
# Vcenter username (AD user) <string>: your_username
vsphere_username = your_username\n
# Vcenter password (AD password) <string>: your_password
vsphere_password = your_secret_pass_here\n
# VSphere server
vsphere_server = chvc01.win.dante.org.uk\n
# Infoblox username <string>: your_username
iblox_username = your_username\n
# Infoblox password <string>: your_password
iblox_password = your_secret_pass_here\n
# Infoblox server <string>: infblox server fqdn
iblox_server = infoblox.win.dante.org.uk\n
# Consul server:port <string>: consul server fqdn:port
consul_server = puppet01.geant.net:8500\n
# Consul access token <string>: consul secret
consul_token = xxxxxxxxxxx\n
"""


def parse():
    """ parse arguments """

    parser = argparse.ArgumentParser()
    parser.add_argument('-var-file', dest='vfile', help='process extra var file',
                        action='append', default=[])
    parser.add_argument('-t', '--test', help='only test', action='store_true')
    parser.add_argument('-s', '--showvars', help='show variables', action='store_true')
    parser.add_argument('--init', help='run terraform init', action='store_true')
    parser.add_argument('--destroy', help='destroy resources', action='store_true')
    parser.add_argument('-p', '--plan', help='dry run execution', action='store_true')
    parser.add_argument('-a', '--apply', help='run terraform', action='store_true')

    return parser.parse_args()


def byebye(status=0):
    """ remove main.tf and say good bye """

    if os.access('./main.tf', os.W_OK):
        os.remove('./main.tf')
    os.sys.exit(status)


def git_pull():
    """ git: stash, checkout, pull """
    git_cmd = git.cmd.Git('.')

    # stash changes
    try:
        git_stdout = git_cmd.stash()
    except Exception as err:
        print "Failed to stash changes {}: {}".format(git_stdout, err)
        byebye(1)
    else:
        git_cmd.stash('clear')
        print "stashed changes: {}".format(git_stdout)

    # pull from remote
    try:
        git_stdout = git_cmd.pull()
    except Exception as err:
        print "Failed to pull remote: {}".format(err)
        byebye(1)
    else:
        print "pulling remote: {}".format(git_stdout)


def git_commit():
    """ commit ONLY tfstate """
    git_cmd = git.cmd.Git('.')
    state_files = ['terraform.tfstate', 'terraform.tfstate.backup']
    now = datetime.now()
    git_msg = "commit tfstate files on {} {} {} {}:{}".format(
        now.year, now.month, now.day, now.hour, now.minute)

    # add files: sometime the backup file is not there
    for tf_status in state_files:
        if os.access(tf_status, os.R_OK):
            try:
                git_stdout = git_cmd.add(state_files)
            except Exception as err:
                print "Failed to add {}: {} {}".format(tf_status, git_stdout, err)
                print "Please add your files: {}".format(', '.join(state_files))
                byebye(1)
            else:
                print "Added file {}: {}".format(tf_status, git_stdout)

    # commit files
    try:
        git_stdout = git_cmd.commit(m=git_msg)
    except Exception as err:
        print "Failed to commit: {} - {}".format(git_stdout, err)
        byebye()
    else:
        print "Commited files: {} - {}".format(git_stdout, git_msg)

    # push
    try:
        git_stdout = git_cmd.push()
    except Exception as err:
        print "Failed to push {}: {}".format(', '.join(state_files), err)
        print "Please commit {} to git".format(', '.join(state_files))
        byebye(1)
    else:
        print "Commited files {}: {} {}".format(', '.join(state_files),
                                                git_stdout, git_msg)


def load_variables(filenames, terrafile='./variables.tf'):
    """ load terraform variables """

    variables = {}

    with open(terrafile) as data_fh:
        data = hcl.load(data_fh)
        for key, value in data.get('variable', {}).iteritems():
            if 'default' in value:
                variables.update({key: value['default']})

    for varfile in filenames:
        with open(varfile) as var_fh:
            data = hcl.load(var_fh)
            variables.update(data)

    return variables


def render(j2_template, j2_context):
    """ render jinja templates """

    config = ConfigParser.RawConfigParser()
    config.readfp(open(CRED_CONF))

    def custom_dictionary(arg_key, arg_sub_key):
        """ return dict value """
        return j2_context[arg_key][arg_sub_key].split('.')[0]

    def custom_variable(arg_var):
        """ return variable """
        return config.get('terraformware', arg_var)

    def custom_global(args_global):
        """ return variable defined in the script """
        return globals()[args_global]

    with open(j2_template, 'r') as my_template:
        template = my_template.read()
    jinja_template = Template(template)
    jinja_template.globals['custom_dictionary'] = custom_dictionary
    jinja_template.globals['custom_variable'] = custom_variable
    jinja_template.globals['custom_global'] = custom_global

    return jinja_template.render(**j2_context)


def terraform_run(action, work_dir='.'):
    """ run terraform """

    tform = Terraform(working_dir=work_dir)
    if action == 'destroy':
        print "running terraform destroy..."
        out = tform.destroy()
    elif action == 'apply':
        print "running terraform plan first..."
        out = tform.cmd('plan')
        print out[1]
        print "applying plan... (takes a while)"
        out = tform.apply(refresh=True)
    elif action == 'init':
        print "running terraform init..."
        out = tform.cmd('init')
    elif action == 'plan':
        print "running terraform init..."
        out = tform.cmd('plan')

    print out[1]


if __name__ == '__main__':
    print '='*80
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    START_TIME = datetime.now()
    TEMPLATE = './terraformware.j2'
    RENDERED_FNAME = 'main.tf'

    if not os.access(CRED_CONF, os.W_OK):
        CRED_FILE = open(CRED_CONF, 'w+')
        CRED_FILE.write(CRED_FILE_CONTENT)
        CRED_FILE.close()
        print "\nThe following file has been created: {0}\n".format(CRED_CONF)
        print "Fill it with proper values and run the script again\n"
        byebye(1)

    if not os.access(TEMPLATE, os.R_OK):
        print 'please run the script from terraform directory'
        byebye(1)

    git_pull()
    ARGS = parse()

    # jinja renderer taken from: https://github.com/Crapworks/terratools
    CONTEXT = load_variables(ARGS.vfile)
    if ARGS.showvars:
        print json.dumps(CONTEXT, indent=2)

    if ARGS.test:
        print render(TEMPLATE, CONTEXT)
    else:
        with open(RENDERED_FNAME, 'w') as fh:
            fh.write(render(TEMPLATE, CONTEXT))
        IBLOX_VARS = ast.literal_eval(json.dumps(CONTEXT))
        INSTANCES = IBLOX_VARS['instances']

    for virtual_machine in range(1, int(INSTANCES) + 1):
        inst = "_{}".format(virtual_machine)
        ipv4_address = IBLOX_VARS[inst]['ipv4_address']
        ipv6_address = IBLOX_VARS[inst]['ipv6_address']
        host_name = IBLOX_VARS[inst]['hostname']
        if ARGS.destroy:
            record.Iblox(host_name, ipv4_address, ipv6_address).destroy()
        else:
            record.Iblox(host_name, ipv4_address, ipv6_address).rebuild()

    if ARGS.destroy:
        terraform_run('destroy')
        git_commit()
    elif ARGS.init:
        terraform_run('init')
    elif ARGS.plan:
        terraform_run('plan')
    elif ARGS.apply:
        terraform_run('apply')
        git_commit()

    SPENT = (datetime.now() - START_TIME).seconds
    print "======== Script processed in {} seconds ========\n".format(SPENT)
    byebye()
